{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../Editor.svelte",
    "../../EditorColorPicker.svelte",
    "../../EditorModal.svelte",
    "../../BrowserRow.svelte",
    "../../DatasetBrowser.svelte",
    "../../QuadEditor.svelte",
    "../../ResourceNavigator.svelte",
    "../../TermEditor.svelte",
    "../../Components.svelte",
    "../../Entry.svelte"
  ],
  "sourcesContent": [
    "<script context=\"module\">\n\tconst editors = [];\n</script>\n<svelte:window on:click=\"{ event => _documentClick(event) }\" />\n<svelte:options accessors={true}></svelte:options>\n<div class=\"cl\" bind:this={$references.editorWrapper}>\n  <div class=\"cl-actionbar\">\n    {#each $state.actionBtns as action}\n      <button\n        class=\"cl-button {action.active ? 'active' : ''}\"\n        title=\"{action.title}\"\n        on:click=\"{event => _btnClicked(action)}\"\n        disabled=\"{action.disabled}\">\n        {@html action.icon}\n      </button>\n    {/each}\n  </div>\n  <div bind:this={$references.editor}\n    class=\"cl-content\"\n    style=\"height: {height}\"\n    contenteditable=\"true\"\n    on:input=\"{event => _onChange(event.target.innerHTML)}\"\n    on:mouseup=\"{() => _handleButtonStatus()}\"\n    on:keyup=\"{() => _handleButtonStatus()}\"\n    on:paste=\"{event => _onPaste(event)}\">\n  </div>\n\n  <textarea bind:this={$references.raw} class=\"cl-textarea\" style=\"max-height: {height}; min-height: {height}\"></textarea>\n  <EditorModal bind:this={$references.modal}></EditorModal>\n  <EditorColorPicker bind:this={$references.colorPicker}></EditorColorPicker>\n</div>\n\n<script>\n  import {\n    getTagsRecursive,\n    saveRange as _saveRange,\n    restoreRange as _restoreRange,\n    exec as _exec,\n    cleanHtml,\n    getActionBtns,\n    getNewActionObj,\n    removeBadTags,\n    isEditorClick\n} from './helpers/util.js';\n\n  import defaultActions from './helpers/actions.js';\n  import EditorModal from './helpers/EditorModal.svelte';\n  import EditorColorPicker from './helpers/EditorColorPicker.svelte';\n\n  import { onMount, createEventDispatcher, setContext, getContext } from \"svelte\";\n  import { createStateStore } from \"./helpers/store.js\";\n  import {writable} from \"svelte/store\";\n\n  let dispatcher = new createEventDispatcher();\n\n  export let actions = [];\n  export let height = '300px';\n  export let html = '';\n  export let removeFormatTags = ['h1', 'h2', 'blockquote']\n\n\n  let helper = writable({\n      foreColor: false,\n      backColor: false,\n      foreColorModal: false,\n      backColorModal: false,\n      image: false,\n      link: false,\n      showEditor: true,\n      blurActive: false\n  });\n\n  editors.push({})\n  let contextKey = \"editor_\" + editors.length;\n\n  let state = createStateStore(contextKey);\n\n  let references = writable({});\n  $state.actionObj = getNewActionObj(defaultActions, actions);\n\n  let context = {\n      exec,\n      getHtml,\n      getText,\n      setHtml,\n      saveRange,\n      restoreRange,\n      helper,\n      references,\n      state,\n      removeFormatTags\n  }\n\n  setContext(contextKey, context);\n\n  onMount(() => {\n      $state.actionBtns = getActionBtns($state.actionObj);\n      setHtml(html);\n  });\n\n  function _btnClicked(action) {\n    $references.editor.focus();\n    saveRange($references.editor);\n    restoreRange($references.editor);\n    action.result.call(context);\n    _handleButtonStatus();\n  }\n\n  function _handleButtonStatus(clearBtns) {\n    const tags = clearBtns ? [] : getTagsRecursive(document.getSelection().focusNode);\n    Object.keys($state.actionObj).forEach((action) => $state.actionObj[action].active = false);\n    tags.forEach((tag) => ($state.actionObj[tag.toLowerCase()] || {}).active = true);\n    $state.actionBtns = getActionBtns($state.actionObj);\n    $state.actionObj = $state.actionObj;\n  }\n\n  function _onPaste(event) {\n    event.preventDefault();\n    exec('insertHTML', event.clipboardData.getData('text/html') ? cleanHtml(event.clipboardData.getData('text/html')) : event.clipboardData.getData('text'));\n  }\n\n  function _onChange(event) {\n     dispatcher('change', event)\n  }\n\n  function _documentClick(event) {\n    if (!isEditorClick(event.target, $references.editorWrapper) && $helper.blurActive) {\n      dispatcher('blur', event);\n    }\n    $helper.blurActive = true;\n  }\n\n  export function exec(cmd, value){\n      _exec(cmd, value);\n  };\n\n  export function getHtml(sanitize) {\n    return sanitize ? removeBadTags($references.editor.innerHTML) : $references.editor.innerHTML;\n  }\n  export function getText() {\n    return $references.editor.innerText;\n  }\n  export function setHtml(html, sanitize) {\n    $references.editor.innerHTML = sanitize ? removeBadTags(html) : (html || '');\n  }\n  export function saveRange() {\n    _saveRange($references.editor);\n  }\n  export function restoreRange() {\n    _restoreRange($references.editor);\n  }\n  export const refs = $references;\n</script>\n\n<style>\n  .cl * {\n    box-sizing: border-box;\n  }\n\n  .cl {\n    box-shadow: 0 2px 3px rgba(10, 10, 10, 0.1), 0 0 0 1px rgba(10, 10, 10, 0.1);\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n\n  .cl-content {\n    height: 300px;\n    outline: 0;\n    overflow-y: auto;\n    padding: 10px;\n    width: 100%;\n    background-color: white;\n  }\n\n  .cl-actionbar {\n    background-color: #ecf0f1;\n    border-bottom: 1px solid rgba(10, 10, 10, 0.1);\n    width: 100%;\n  }\n\n  .cl-button {\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n    height: 35px;\n    outline: 0;\n    width: 35px;\n    vertical-align: top;\n    position: relative;\n  }\n\n  .cl-button:hover, .cl-button.active {\n    background-color: #fff;\n  }\n\n  .cl-button:disabled {\n    opacity: .5;\n    pointer-events: none;\n  }\n\n  .cl-textarea {\n    display: none;\n    max-width: 100%;\n    min-width: 100%;\n    border: none;\n    padding: 10px;\n  }\n\n  .cl-textarea:focus {\n    outline: none;\n  }\n\n</style>\n",
    "<div style=\"display: {show ? 'block' : 'none'}\">\n    <div class=\"color-picker-overlay\" on:click=\"{close}\"></div>\n    <div class=\"color-picker-wrapper\">\n        {#each btns as btn}\n        <button type=\"button\" class=\"color-picker-btn\" style=\"background-color:{btn.color};\" on:click=\"{event => selectColor(btn)}\">{btn.text || ''}</button>\n        {/each}\n    </div>\n</div>\n\n<script>\n    import {onMount, createEventDispatcher } from \"svelte\";\n\n    let dispatcher = new createEventDispatcher();\n\n    const colors = ['ffffff', '000000', 'eeece1', '1f497d', '4f81bd', 'c0504d', '9bbb59', '8064a2', '4bacc6', 'f79646', 'ffff00', 'f2f2f2', '7f7f7f', 'ddd9c3', 'c6d9f0', 'dbe5f1', 'f2dcdb', 'ebf1dd', 'e5e0ec', 'dbeef3', 'fdeada', 'fff2ca', 'd8d8d8', '595959', 'c4bd97', '8db3e2', 'b8cce4', 'e5b9b7', 'd7e3bc', 'ccc1d9', 'b7dde8', 'fbd5b5', 'ffe694', 'bfbfbf', '3f3f3f', '938953', '548dd4', '95b3d7', 'd99694', 'c3d69b', 'b2a2c7', 'b7dde8', 'fac08f', 'f2c314', 'a5a5a5', '262626', '494429', '17365d', '366092', '953734', '76923c', '5f497a', '92cddc', 'e36c09', 'c09100', '7f7f7f', '0c0c0c', '1d1b10', '0f243e', '244061', '632423', '4f6128', '3f3151', '31859b', '974806', '7f6000']\n\n    const getBtns = () => {\n        const btns = colors.map((color) => ({ color: `#${color}` }));\n        btns.push({ text: '#', modal: true });\n        return btns;\n    }\n\n    export let show = false;\n    export let btns = [];\n    export let event = '';\n\n    onMount(()=>{\n        btns = getBtns();\n    });\n\n    function close() {\n        show = false;\n    }\n    function selectColor(btn) {\n        dispatcher(event,btn)\n        close();\n    }\n\n</script>\n\n<style>\n    .color-picker-wrapper {\n        border: 1px solid #ecf0f1;\n        border-top: none;\n        background: #FFF;\n        box-shadow: rgba(0,0,0,.1) 0 2px 3px;\n        width: 290px;\n        left: 50%;\n        -webkit-transform: translateX(-50%);\n        transform: translateX(-50%);\n        padding: 0;\n        position: absolute;\n        top: 37px;\n        z-index: 11;\n    }\n\n    .color-picker-overlay {\n        position: absolute;\n        background-color: rgba(255,255,255,.5);\n        height: 100%;\n        width: 100%;\n        left: 0;\n        top: 0;\n        z-index: 10;\n    }\n\n    .color-picker-btn {\n        display: block;\n        position: relative;\n        float: left;\n        height: 20px;\n        width: 20px;\n        border: 1px solid #333;\n        padding: 0;\n        margin: 2px;\n        line-height: 35px;\n        text-decoration: none;\n        background: #FFF;\n        color: #333!important;\n        cursor: pointer;\n        text-align: left;\n        font-size: 15px;\n        transition: all 150ms;\n        line-height: 20px;\n        padding: 0px 5px;\n    }\n\n    .color-picker-btn:hover::after {\n        content: \" \";\n        display: block;\n        position: absolute;\n        top: -5px;\n        left: -5px;\n        height: 27px;\n        width: 27px;\n        background: inherit;\n        border: 1px solid #FFF;\n        box-shadow: #000 0 0 2px;\n        z-index: 10;\n    }\n</style>\n",
    "<svelte:options accessors={true}></svelte:options>\n<div style=\"display: {show ? 'block' : 'none'}\">\n    <div class=\"cl-editor-overlay\" on:click=\"{cancel}\"></div>\n    <div class=\"cl-editor-modal\">\n        <div class=\"modal-box\">\n            <span class=\"modal-title\">{title}</span>\n            <form on:submit|preventDefault=\"{event=>confirm()}\">\n                <label class=\"modal-label\" class:input-error={error}>\n                    <input bind:this={refs.text} on:keyup=\"{hideError}\" type=\"text\" name=\"text\" bind:value=\"{text}\">\n                    <span class=\"input-info\">\n                        <span>{label}</span>\n                        {#if error}\n                        <span class=\"msg-error\">Required</span>\n                        {/if}\n                    </span>\n                </label>\n                <button class=\"modal-button modal-submit\" type=\"submit\">Confirm</button>\n                <button class=\"modal-button modal-reset\" type=\"reset\" on:click=\"{cancel}\">Cancel</button>\n            </form>\n        </div>\n    </div>\n</div>\n\n<script>\n    import {onMount, createEventDispatcher } from \"svelte\";\n\n    let dispatcher = new createEventDispatcher();\n\n    export let show = false;\n    export let text = '';\n    export let event = '';\n    export let title = '';\n    export let label = '';\n    export let error = false;\n\n    let refs = {}\n\n    $:{\n        if(show){\n            setTimeout(() => {\n                refs.text.focus();\n            });\n        }\n    }\n\n\n    function confirm() {\n        if (text) {\n            console.log('dispatcher',text,event)\n            dispatcher(event,text);\n            cancel();\n        } else {\n            error = true;\n            refs.text.focus();\n        }\n    }\n\n    function cancel() {\n        show = false;\n        text = '';\n        error = false;\n    }\n\n    function hideError() {\n        error = false;\n    }\n\n    // no longer needed with $set\n    // export function showModal(options){\n    //     if(options.show) show = options.show;\n    //     if(options.text) text = options.text;\n    //     if(options.event) event = options.event;\n    //     if(options.title) title = options.title;\n    //     if(options.label) label = options.label;\n    // }\n</script>\n\n<style>\n    .cl-editor-modal {\n        position: absolute;\n        top: 37px;\n        left: 50%;\n        -webkit-transform: translateX(-50%);\n        transform: translateX(-50%);\n        max-width: 520px;\n        width: 100%;\n        height: 140px;\n        backface-visibility: hidden;\n        z-index: 11;\n    }\n\n    .cl-editor-overlay {\n        position: absolute;\n        background-color: rgba(255,255,255,.5);\n        height: 100%;\n        width: 100%;\n        left: 0;\n        top: 0;\n        z-index: 10;\n    }\n\n    .modal-box {\n        position: absolute;\n        top: 0;\n        left: 50%;\n        -webkit-transform: translateX(-50%);\n        transform: translateX(-50%);\n        max-width: 500px;\n        width: calc(100% - 20px);\n        padding-bottom: 36px;\n        z-index: 1;\n        background-color: #FFF;\n        text-align: center;\n        font-size: 14px;\n        box-shadow: rgba(0,0,0,.2) 0 2px 3px;\n        -webkit-backface-visibility: hidden;\n        backface-visibility: hidden;\n    }\n\n    .modal-title {\n        font-size: 24px;\n        font-weight: 700;\n        margin: 0 0 20px;\n        padding: 2px 0 4px;\n        display: block;\n        border-bottom: 1px solid #EEE;\n        color: #333;\n        background: #fbfcfc;\n    }\n\n    .modal-label {\n        display: block;\n        position: relative;\n        margin: 15px 12px;\n        height: 29px;\n        line-height: 29px;\n        overflow: hidden;\n    }\n\n    .modal-label input {\n        position: absolute;\n        top: 0;\n        right: 0;\n        height: 27px;\n        line-height: 25px;\n        border: 1px solid #DEDEDE;\n        background: #fff;\n        font-size: 14px;\n        max-width: 330px;\n        width: 70%;\n        padding: 0 7px;\n        transition: all 150ms;\n    }\n\n    .modal-label input:focus {\n        outline: none;\n    }\n\n    .input-error input {\n        border: 1px solid #e74c3c;\n    }\n\n    .input-info {\n        display: block;\n        text-align: left;\n        height: 25px;\n        line-height: 25px;\n        transition: all 150ms;\n    }\n\n    .input-info span {\n        display: block;\n        color: #69878f;\n        background-color: #fbfcfc;\n        border: 1px solid #DEDEDE;\n        padding: 0 7px;\n        width: 150px;\n    }\n\n    .input-error .input-info {\n        margin-top: -27px;\n    }\n\n    .input-error .msg-error {\n        color: #e74c3c;\n    }\n\n    .modal-button {\n        position: absolute;\n        bottom: 10px;\n        right: 0;\n        text-decoration: none;\n        color: #FFF;\n        display: block;\n        width: 100px;\n        height: 35px;\n        line-height: 33px;\n        margin: 0 10px;\n        background-color: #333;\n        border: none;\n        cursor: pointer;\n        font-family: \"Lato\",Helvetica,Verdana,sans-serif;\n        font-size: 16px;\n        transition: all 150ms;\n    }\n\n    .modal-submit {\n        right: 110px;\n        background: #2bc06a;\n    }\n\n    .modal-reset {\n        color: #555;\n        background: #e6e6e6;\n    }\n</style>\n",
    "<script>\n  import TermEditor from \"./TermEditor.svelte\";\n  import ExistingTermEditor from \"./ExistingTermEditor.svelte\";\n  import ResourceNavigator from \"./ResourceNavigator.svelte\";\n  import Factory from \"@rdfjs/data-model\";\n  import { createEventDispatcher } from \"svelte\";\n  const dispatch = createEventDispatcher();\n  export let value;\n  export let fixedSubject;\n  export let fixedObject;\n  export let fixedGraph;\n  export let labels = false;\n  let subject = value ? value.subject : fixedSubject ? fixedSubject : null;\n  let predicate = value ? value.predicate : Factory.namedNode(\"\");\n  let object = value ? value.object : fixedObject ? fixedObject : null;\n  let graph = value ? value.graph : fixedGraph ? fixedGraph : null;\n  const elementChanged = function (val) {\n    if (subject && predicate && object && graph) {\n      const newQuad = Factory.quad(subject, predicate, object, graph);\n      if (!value || !newQuad.equals(value)) {\n        console.log(\"new quad\", newQuad);\n        value = newQuad;\n      }\n    }\n  };\n  $: elementChanged(subject);\n  $: elementChanged(predicate);\n  $: elementChanged(object);\n  $: elementChanged(graph);\n  $: setElements(value);\n  function setElements(quad) {\n    if (quad !== null) {\n      subject = quad.subject;\n      predicate = quad.predicate;\n      object = quad.object;\n      graph = quad.graph;\n    }\n  }\n</script>\n\n<style>\n  .area {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-template-rows: auto;\n    grid-gap: 0 1em;\n    gap: 0 1em;\n    align-items: start;\n    margin-bottom: 0.8rem;\n  }\n\n  .element {\n    display: flex;\n    align-items: left;\n    grid-row: 2/ span 1;\n    flex-grow: 4;\n  }\n\n  label {\n    grid-row: 1/ span 1;\n  }\n\n  .placeholder {\n    grid-row: 2/ span 1;\n    flex-grow: 1;\n  }\n</style>\n\n<div class=\"area\">\n  {#if !fixedSubject}\n    {#if labels}\n      <label>Subject:</label>\n    {/if}\n    <div class=\"element\">\n      <TermEditor bind:value={subject} termTypes={['BlankNode', 'NamedNode']} />\n      {#if subject && subject.termType !== 'Literal'}\n        <ResourceNavigator resource={subject} on:subject on:object />\n      {/if}\n    </div>\n  {:else}\n  <div class=\"placeholder\"></div>\n  {/if}\n  {#if labels}\n    <label>Predicate:</label>\n  {/if}\n  <div class=\"element\">\n    <ExistingTermEditor bind:value={predicate} />\n  </div>\n  {#if !fixedObject}\n    {#if labels}\n      <label>Object:</label>\n    {/if}\n    <div class=\"element\">\n      <TermEditor\n        bind:value={object}\n        termTypes={['BlankNode', 'NamedNode', 'Literal']} />\n      {#if object && object.termType !== 'Literal'}\n        <ResourceNavigator resource={object} on:subject on:object />\n      {/if}\n    </div>\n  {:else}\n  <div class=\"placeholder\"></div>\n  {/if}\n  {#if !fixedGraph}\n    <div class=\"element\">\n      <TermEditor\n        bind:value={graph}\n        termTypes={['BlankNode', 'NamedNode', 'DefaultGraph']} />\n    </div>\n  {/if}\n</div>\n",
    "<script>\nimport SubjExpand from './images/SubjExpand.svelte';\nimport ObjExpand from './images/ObjExpand.svelte';\nimport BrowserRow from \"./BrowserRow.svelte\"\nimport Factory from \"@rdfjs/data-model\";\nimport DatasetManager from \"./DatasetUtils\";\nexport let value;\nexport let subject = null;\nlet subjectFilter = null;\nexport let object = null;\nlet objectFilter = null;\nexport let graph = null;\nlet graphFilter = null;\nlet newQuad = null;\nlet addingQuad = false;\nconst dm = new DatasetManager(value, (ds) => value = value);\nif (subject) {\n    if (typeof subject === \"string\") {\n        subjectFilter = Factory.namedNode(subject);\n    }\n    else {\n        subjectFilter = subject;\n    }\n}\nif (object) {\n    if (typeof object === \"string\") {\n        objectFilter = Factory.namedNode(object);\n    }\n    else {\n        objectFilter = object;\n    }\n}\nif (graph) {\n    if (typeof graph === \"string\") {\n        graphFilter = Factory.namedNode(graph);\n    }\n    else {\n        graphFilter = graph;\n    }\n}\n$: if (newQuad !== null) {\n    addNewQuad(newQuad);\n    newQuad = null;\n}\nlet orderedQuads;\n//value is just us so it reacts for that var\n$: orderedQuads = value || subjectFilter || objectFilter ? getOrderedQuads() : null;\nfunction addNewQuad(q) {\n    addingQuad = false;\n    value.add(q);\n    value = value;\n}\nfunction addQuad() {\n    newQuad = null;\n    addingQuad = true;\n}\nfunction getOrderedQuads() {\n    const result = dm.orderQuads(value.match(subjectFilter, undefined, objectFilter, graphFilter));\n    console.log(\"getOrderedQuads\", result);\n    return result;\n}\nfunction setSubject(event) {\n    objectFilter = null;\n    subjectFilter = event.detail;\n}\nfunction setObject(event) {\n    console.log(\"setobj\", event.detail);\n    objectFilter = event.detail;\n    subjectFilter = null;\n}\n\n</script>\n<style>\n .icon {\n     padding: .4rem;\n }\n\n</style>\n\n<div>\n    {#if subjectFilter}\n        <h2>\n            <button class=\"icon\" on:click={() => {\n                    objectFilter = subjectFilter;\n                    subjectFilter = null;\n                }}>\n                <ObjExpand size=\"1rem\"/>\n            </button>\n            {subjectFilter.value}\n            <SubjExpand size=\"2em\"/>\n        </h2>\n    {/if}\n    {#if objectFilter}\n        <h2 style=\"text-align: end;\">\n            <ObjExpand size=\"2em\"/>\n            {objectFilter.value}\n            <button class=\"icon\" on:click={() => {\n                subjectFilter = objectFilter;\n                objectFilter = null;\n            }}>\n            <SubjExpand size=\"1rem\"/>\n        </button>\n        </h2>\n    {/if}\n    {#each orderedQuads as t (t.id)}\n    <span>\n      <BrowserRow bind:value={t.quad} fixedSubject={subjectFilter} \n      fixedGraph={graphFilter} fixedObject={objectFilter}\n      on:subject={setSubject} on:object={setObject} />\n    </span>\n    {/each}\n    {#if addingQuad}\n        <div>\n            <BrowserRow bind:value={newQuad} fixedSubject={subjectFilter} \n            fixedGraph={graphFilter} fixedObject={objectFilter}/>\n        </div>\n    {:else}\n        <div>\n            <button on:click={addQuad}>Add attribute</button>\n        </div>\n    {/if}\n</div>",
    "<script>\n  import Factory from \"@rdfjs/data-model\";\n  import TermEditor from \"./TermEditor.svelte\";\n  import ExistingTermEditor from \"./ExistingTermEditor.svelte\";\n\n  let subject, predicate, object, graph;\n  export let value;\n  export let labels = false;\n\n  $: elementChanged(subject);\n  $: elementChanged(predicate);\n  $: elementChanged(object);\n  $: elementChanged(graph);\n\n  $: valueChanged(value);\n\n  function valueChanged(v) {\n    subject = v ? v.subject : null;\n    predicate = value ? value.predicate : Factory.namedNode(\"\");\n    object = value ? value.object : null;\n    graph = value ? value.graph : null;\n  }\n\n  function elementChanged(val) {\n    if (subject && predicate && object && graph) {\n      value = Factory.quad(subject, predicate, object, graph);\n    }\n  }\n</script>\n\n<style>\n  .area {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-template-rows: auto;\n    grid-gap: 0 1em;\n    gap: 0 1em;\n    align-items: start;\n    margin-bottom: 0.8rem;\n  }\n\n  .element {\n    display: flex;\n    align-items: left;\n    grid-row: 2/ span 1;\n    flex-grow: 4;\n  }\n\n  label {\n    grid-row: 1/ span 1;\n  }\n\n</style>\n\n<div class=\"area\">\n\n  {#if labels}\n    <label>Subject:</label>\n  {/if}\n  <div class=\"element\">\n  <TermEditor bind:value={subject} termTypes=\"['BlankNode', 'NamedNode']\" />\n  </div>\n  {#if labels}\n    <label>Predicate:</label>\n  {/if}\n  <div class=\"element\">\n  <ExistingTermEditor bind:value={predicate} />\n  </div>\n  {#if labels}\n    <label>Object:</label>\n  {/if}\n  <div class=\"element\">\n  <TermEditor\n    bind:value={object}\n    termTypes=\"['BlankNode', 'NamedNode', 'Literal']\" />\n  </div>\n  {#if labels}\n    <label>Graph:</label>\n  {/if}\n  <div class=\"element\">\n  <TermEditor\n    bind:value={graph}\n    termTypes=\"['BlankNode', 'NamedNode', 'DefaultGraph']\" />\n  </div>\n</div>\n",
    "<script>\nimport { createEventDispatcher } from 'svelte';\nimport SubjExpand from './images/SubjExpand.svelte';\nimport ObjExpand from './images/ObjExpand.svelte';\nconst dispatch = createEventDispatcher();\nexport let resource;\nfunction setSubject() {\n    dispatch(\"subject\", resource);\n}\nfunction setObject() {\n    dispatch(\"object\", resource);\n}\n\n</script>\n\n<style>\ndiv {\n  display: flex;\n  flex-shrink: 0;\n}\nbutton {\n  margin-left: .4em;\n}\n</style>\n\n<div>\n    <button class=\"icon\" on:click={setSubject}>\n        <SubjExpand size=\"1em\"/>\n    </button>\n    <button class=\"icon\" on:click={setObject}>\n        <ObjExpand size=\"1em\"/>\n    </button>\n</div>",
    "<script>\n  import Factory from \"@rdfjs/data-model\";\n  import ExistingTermEditor from \"./ExistingTermEditor.svelte\";\n\n  export let value;\n  export let termTypes = null;\n  let type = null;\n  const availableOptions = {\n    html: Factory.literal(\n      \"\",\n      Factory.namedNode(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#HTML\")\n    ),\n    label: Factory.literal(\"\"),\n    \"label with language\": Factory.literal(\"\", \"en\"),\n    IRI: Factory.namedNode(\"\"),\n    \"Blank Node\": Factory.blankNode(),\n    DefaultGraph: Factory.defaultGraph()\n  };\n\n  let options = termTypes\n    ? Object.fromEntries(\n        Object.entries(availableOptions).filter(\n          ([k, n]) => termTypes.indexOf(n.termType) > -1\n        )\n      )\n    : availableOptions;\n\n  const previousValues = new Map();\n\n  function typeSelected (event) {\n      console.log(\"this.termTypes: \",termTypes);\n      console.log(\"typeSelected: \",event);\n      console.log(\"this.type: \",type);\n      if (!type) {\n          return;\n      }\n      const previousValue = previousValues.get(type);\n      if (previousValue && previousValue.value.length > 0 \n              && window.confirm(\"Restoring previous value\")) { \n              value = previousValue;\n      } else {\n          console.log(\"maps to: \",options[(type)]);\n          value = options[type];\n      }\n  }\n\n  function reset() {\n    previousValues.set(compType(), value);\n    type = null;\n    value = null;\n  }\n\n  function compType () {\n        const types = {\n            \"http://www.w3.org/1999/02/22-rdf-syntax-ns#HTML\": \"html\",\n            \"http://www.w3.org/2001/XMLSchema#string\": \"label\",\n            \"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString\": \"langString\"\n        };\n        return (\n            value !== null ?\n                value.termType === \"Literal\" ? \n                    types[value.datatype.value] ?\n                        types[value.datatype.value] : \"literal\"\n                : value.termType === \"NamedNode\" ? \"IRI\" \n                : value.termType === \"DefaultGraph\" ? \"DefaultGraph\"\n                : \"BlankNode\"\n                : null );\n    }\n</script>\n\n<style>\n  span {\n    display: flex;\n  }\n\n  svg {\n    height: 1em;\n  }\n</style>\n\n<div class=\"te\">\n  {#if !value}\n    <select bind:value={type} on:change={typeSelected}>\n      <option disabled value={null}>Select type</option>\n      {#each Object.keys(options) as option}\n        <option value={option}>{option}</option>\n      {/each}\n    </select>\n  {:else}\n    <span>\n      <button type=\"button\" class=\"icon\" on:click={reset}>\n        <svg viewBox=\"0 0 24 24\">\n          <path\n            fill=\"currentColor\"\n            d=\"M12,6L7,11H17L12,6M7,13L12,18L17,13H7Z\" />\n        </svg>\n      </button>\n      {#if value !== null}\n        <ExistingTermEditor bind:value on:input />\n      {/if}\n    </span>\n  {/if}\n</div>\n",
    "<script>\n  import * as Factory from \"@rdfjs/data-model\";\n  import Dataset from \"@rdfjs/dataset\";\n  import { SimpleLiteralEditor, HtmlEditor, \n      BlankNodeEditor, NamedNodeEditor, \n      ExistingTermEditor, TermEditor,\n      QuadEditor, DatasetEditor, DatasetBrowser } from \"rdfjs-svelte\";\n  import {link} from 'svelte-spa-router'\n\n  let literal = Factory.literal(\n    \"My first literal\",\n    \"http://www.w3.org/2001/XMLSchema#string\"\n  );\n  let htmlLiteral = Factory.literal(\n    \"Hello <strong>world</strong>\",\n    \"http://www.w3.org/1999/02/22-rdf-syntax-ns#HTML\"\n  );\n  //$: console.log(\"htmlLiteral\", htmlLiteral);\n  let blankNode1 = Factory.blankNode();\n  let namedNode1 = Factory.namedNode(\"http://example.org/foo\");\n  let namedNode2 = Factory.namedNode(\"http://example.org/other\");\n  let newValue = null;\n  let newValue2 = null;\n  let quad1 = Factory.quad(Factory.namedNode(\"http://example.org/Alice\"), \n          Factory.namedNode(\"http://example.org/knows\"), \n          Factory.namedNode(\"http://example.org/Bob\"), Factory.defaultGraph());\n  //$: console.log(\"quad1\", quad1);\n  window.q1 = quad1;\n  let dataset = Dataset.dataset([Factory.quad(Factory.namedNode(\"http://example.org/Bill\"), \n          Factory.namedNode(\"http://example.org/knows\"), \n          Factory.namedNode(\"http://example.org/Berta\"), Factory.defaultGraph()),\n          Factory.quad(Factory.namedNode(\"http://example.org/Charlie\"), \n          Factory.namedNode(\"http://example.org/knows\"), \n          Factory.namedNode(\"http://example.org/Carl\"), Factory.defaultGraph()),\n          Factory.quad(Factory.namedNode(\"http://example.org/Carl\"), \n          Factory.namedNode(\"http://example.org/admires\"), \n          Factory.namedNode(\"http://example.org/Bill\"), Factory.defaultGraph()),\n          Factory.quad(Factory.namedNode(\"http://example.org/Berta\"), \n          Factory.namedNode(\"http://example.org/knows\"), \n          Factory.namedNode(\"http://example.org/Charlie\"), Factory.defaultGraph()),\n          Factory.quad(Factory.namedNode(\"http://example.org/Bill\"), \n          Factory.namedNode(\"http://example.org/loves\"), \n          Factory.namedNode(\"http://example.org/Alice\"), \n          Factory.namedNode(\"http://example.org/BillsSecrets\"))]);\n\n  $: console.log(\"dataset\", dataset);\n</script>\n\n<style>\n  main {\n    padding: 1em;\n    margin: 0 auto;\n  }\n\n  h1 {\n    color: #ff3e00;\n    text-transform: uppercase;\n    font-size: 4em;\n    font-weight: 100;\n  }\n\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n</style>\n\n<main>\n  <a href=\"/\" use:link>&lt;- back to entry page</a>\n  <h1>Demo of RDFJS-Svelte components</h1>\n  <p>\n  This page shows various components, many components are shown twice with the same variable to demonstrate reactivity.\n  </p>\n  <HtmlEditor bind:value={htmlLiteral} />\n  Same: <ExistingTermEditor bind:value={htmlLiteral} />\n  <hr>\n  <SimpleLiteralEditor bind:value={literal} />\n  Same: <ExistingTermEditor bind:value={literal} />\n  <hr>\n  <NamedNodeEditor bind:value={namedNode1} /><br />\n  Same: <ExistingTermEditor bind:value={namedNode1} />\n  <hr>\n  <BlankNodeEditor bind:value={blankNode1} />\n  same: <ExistingTermEditor bind:value={blankNode1} />\n  <hr>\n  <TermEditor bind:value={newValue} />\n  Same: <TermEditor bind:value={newValue} />\n  <hr>\n  Limited types:\n  <TermEditor bind:value={newValue2} termTypes=\"['BlankNode', 'NamedNode', 'DefaultGraph']\" />\n  <hr>\n  Existing resource:\n    <TermEditor bind:value={namedNode2} />\n<hr>\n  <QuadEditor bind:value={quad1} labels />\n  Same: <QuadEditor bind:value={quad1} />\n\n  <h2>Dataset</h2>\n  <DatasetEditor bind:value={dataset} />\n  <h2>Dataset Browser</h2>\n  <DatasetBrowser bind:value={dataset} \n  subject=\"http://example.org/Bill\" graph={Factory.defaultGraph()} />\n</main>\n",
    "<script>\n  import * as Factory from \"@rdfjs/data-model\";\n  import Dataset from \"@rdfjs/dataset\";\n  import * as N3 from \"n3\";\n  import {link} from 'svelte-spa-router'\n  import {\n    DatasetBrowser,\n  } from \"rdfjs-svelte\";\n\n  global.setImmediate = function(f) {\n    setTimeout(f,0);\n  }\n  let dataset = Dataset.dataset([]);\n  const parser = new N3.Parser();\n\n  fetch(\"./tbbt.nt\")\n    .then((r) => r.text())\n    .then((t) => {\n      parser.parse(\n        t,\n        (error, quad, prefixes) => {\n          if (quad) {\n            console.log(JSON.stringify(quad));\n            dataset.add(quad);\n          }\n          else {\n            console.log(\"# Tjhjhl, folks!\", prefixes);\n            console.log(\"dataset\", dataset);\n            dataset = dataset;\n          }\n        }\n      );\n    });\n\n\n  $: console.log(\"dataset\", dataset);\n</script>\n\n<style>\n  * {\n    box-sizing: border-box;\n  }\n\n  main {\n    padding: 1em;\n    margin: 0 auto;\n  }\n\n  h1 {\n    color: #ff3e00;\n    text-transform: uppercase;\n    font-size: 4em;\n    font-weight: 100;\n  }\n\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n</style>\n\n<main>\n  <h1>RDFJS-Svelte</h1>\n  <p>\n    <a href=\"https://svelte.dev/\">Svelte</a>\n    components to edit\n    <a href=\"http://rdf.js.org/\">RDFSJS</a>\n    objects such as Literals, NamedNodes and Datasets.\n  </p>\n  <p>\n    The sources are available on\n    <a href=\"https://github.com/linked-solutions/rdfjs-svelte\">GitHub</a>\n    .\n  </p>\n  <p>\n    Also check out\n    <a href=\"https://rdfjs-vue.linked.solutions/\">RDFSJS Vue</a>\n    which offers similar functionality for\n    <a href=\"https://vuejs.org/\">Vue</a>\n    instead of Svelte.\n  </p>\n  <p>Try out the Dataset Browser below or any component <a href=\"/components\" use:link>here</a>.</p>\n  <DatasetBrowser\n    bind:value={dataset}\n    subject=\"http://example.org/person/sheldon-cooper\"\n    graph={Factory.defaultGraph()} />\n</main>\n"
  ],
  "names": [],
  "mappings": "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"
}